# >----------< FUNCTIONS >-----------------------------------------------------------------------< #

function(fnPrint)
  set(noValueArgs "WITH_CONTEXT")
  set(oneValueArgs "INDENT" "FOREGROUND" "BACKGROUND")
  set(multiValueArgs "STYLES" "MESSAGE")
  cmake_parse_arguments(
    PARSE_ARGV
    0
    "ARG"
    "${noValueArgs}"
    "${oneValueArgs}"
    "${multiValueArgs}"
  )
  # Defaults
  if(NOT ARG_WITH_CONTEXT)
    set(CMAKE_MESSAGE_CONTEXT "")
  endif()
  if(NOT DEFINED ARG_INDENT)
    set(ARG_INDENT 0)
  endif()
  if(NOT DEFINED ARG_FOREGROUND)
    set(ARG_FOREGROUND "DEFAULT")
  endif()
  if(NOT DEFINED ARG_BACKGROUND)
    set(ARG_BACKGROUND "DEFAULT")
  endif()
  if(NOT DEFINED ARG_STYLES)
    set(ARG_STYLES "")
  endif()
  if(NOT DEFINED ARG_MESSAGE)
    set(ARG_MESSAGE "")
  endif()
  # Handlers
  if(ARG_INDENT STREQUAL "INC")
    list(APPEND CMAKE_MESSAGE_INDENT "  ")
  elseif(ARG_INDENT STREQUAL "DEC")
    list(POP_BACK CMAKE_MESSAGE_INDENT)
  elseif(ARG_INDENT EQUAL 0)
    set(CMAKE_MESSAGE_INDENT "")
  elseif(ARG_INDENT GREATER 0)
    set(CMAKE_MESSAGE_INDENT "")
    math(EXPR indent "${ARG_INDENT} - 1")
    foreach(i RANGE 0 ${indent})
      list(APPEND CMAKE_MESSAGE_INDENT "  ")
    endforeach()
  else()
    set(CMAKE_MESSAGE_INDENT "")
  endif()
  if(ARG_FOREGROUND STREQUAL "DEFAULT")
    set(ARG_FOREGROUND ${_prtFgDef})
  elseif(ARG_FOREGROUND STREQUAL "BLACK")
    set(ARG_FOREGROUND ${_prtFgBlack})
  elseif(ARG_FOREGROUND STREQUAL "RED")
    set(ARG_FOREGROUND ${_prtFgRed})
  elseif(ARG_FOREGROUND STREQUAL "GREEN")
    set(ARG_FOREGROUND ${_prtFgGreen})
  elseif(ARG_FOREGROUND STREQUAL "YELLOW")
    set(ARG_FOREGROUND ${_prtFgYellow})
  elseif(ARG_FOREGROUND STREQUAL "BLUE")
    set(ARG_FOREGROUND ${_prtFgBlue})
  elseif(ARG_FOREGROUND STREQUAL "MAGENTA")
    set(ARG_FOREGROUND ${_prtFgMagenta})
  elseif(ARG_FOREGROUND STREQUAL "CYAN")
    set(ARG_FOREGROUND ${_prtFgCyan})
  elseif(ARG_FOREGROUND STREQUAL "WHITE")
    set(ARG_FOREGROUND ${_prtFgWhite})
  elseif(ARG_FOREGROUND STREQUAL "BR_BLACK")
    set(ARG_FOREGROUND ${_prtFgBrBlack})
  elseif(ARG_FOREGROUND STREQUAL "BR_RED")
    set(ARG_FOREGROUND ${_prtFgBrRed})
  elseif(ARG_FOREGROUND STREQUAL "BR_GREEN")
    set(ARG_FOREGROUND ${_prtFgBrGreen})
  elseif(ARG_FOREGROUND STREQUAL "BR_YELLOW")
    set(ARG_FOREGROUND ${_prtFgBrYellow})
  elseif(ARG_FOREGROUND STREQUAL "BR_BLUE")
    set(ARG_FOREGROUND ${_prtFgBrBlue})
  elseif(ARG_FOREGROUND STREQUAL "BR_MAGENTA")
    set(ARG_FOREGROUND ${_prtFgBrMagenta})
  elseif(ARG_FOREGROUND STREQUAL "BR_CYAN")
    set(ARG_FOREGROUND ${_prtFgBrCyan})
  elseif(ARG_FOREGROUND STREQUAL "BR_WHITE")
    set(ARG_FOREGROUND ${_prtFgBrWhite})
  else()
    set(ARG_FOREGROUND ${_prtFgDef})
  endif()
  if(ARG_BACKGROUND STREQUAL "DEFAULT")
    set(ARG_BACKGROUND ${_prtBgDef})
  elseif(ARG_BACKGROUND STREQUAL "BLACK")
    set(ARG_BACKGROUND ${_prtBgBlack})
  elseif(ARG_BACKGROUND STREQUAL "RED")
    set(ARG_BACKGROUND ${_prtBgRed})
  elseif(ARG_BACKGROUND STREQUAL "GREEN")
    set(ARG_BACKGROUND ${_prtBgGreen})
  elseif(ARG_BACKGROUND STREQUAL "YELLOW")
    set(ARG_BACKGROUND ${_prtBgYellow})
  elseif(ARG_BACKGROUND STREQUAL "BLUE")
    set(ARG_BACKGROUND ${_prtBgBlue})
  elseif(ARG_BACKGROUND STREQUAL "MAGENTA")
    set(ARG_BACKGROUND ${_prtBgMagenta})
  elseif(ARG_BACKGROUND STREQUAL "CYAN")
    set(ARG_BACKGROUND ${_prtBgCyan})
  elseif(ARG_BACKGROUND STREQUAL "WHITE")
    set(ARG_BACKGROUND ${_prtBgWhite})
  elseif(ARG_BACKGROUND STREQUAL "BR_BLACK")
    set(ARG_BACKGROUND ${_prtBgBrBlack})
  elseif(ARG_BACKGROUND STREQUAL "BR_RED")
    set(ARG_BACKGROUND ${_prtBgBrRed})
  elseif(ARG_BACKGROUND STREQUAL "BR_GREEN")
    set(ARG_BACKGROUND ${_prtBgBrGreen})
  elseif(ARG_BACKGROUND STREQUAL "BR_YELLOW")
    set(ARG_BACKGROUND ${_prtBgBrYellow})
  elseif(ARG_BACKGROUND STREQUAL "BR_BLUE")
    set(ARG_BACKGROUND ${_prtBgBrBlue})
  elseif(ARG_BACKGROUND STREQUAL "BR_MAGENTA")
    set(ARG_BACKGROUND ${_prtBgBrMagenta})
  elseif(ARG_BACKGROUND STREQUAL "BR_CYAN")
    set(ARG_BACKGROUND ${_prtBgBrCyan})
  elseif(ARG_BACKGROUND STREQUAL "BR_WHITE")
    set(ARG_BACKGROUND ${_prtBgBrWhite})
  else()
    set(ARG_BACKGROUND ${_prtBgDef})
  endif()
  set(styles "")
  foreach(style IN LISTS ARG_STYLES)
    if(style STREQUAL "BOLD")
      list(APPEND styles ${_prtBold})
    elseif(style STREQUAL "DIM")
      list(APPEND styles ${_prtDim})
    elseif(style STREQUAL "ITALIC")
      list(APPEND styles ${_prtItalic})
    elseif(style STREQUAL "UNDERLINE")
      list(APPEND styles ${_prtUnderline})
    elseif(style STREQUAL "BLINK")
      list(APPEND styles ${_prtBlink})
    elseif(style STREQUAL "REVERSE")
      list(APPEND styles ${_prtReverse})
    elseif(style STREQUAL "HIDDEN")
      list(APPEND styles ${_prtHidden})
    elseif(style STREQUAL "STRIKE")
      list(APPEND styles ${_prtStrike})
    else()
      list(APPEND styles "")
    endif()
  endforeach()
  list(JOIN styles "${_prtDelim}" styles)
  # Print
  message(
    NOTICE
    "${_prtBegin}${styles}${_prtDelim}${ARG_FOREGROUND}${_prtDelim}${ARG_BACKGROUND}${_prtEnd}${ARG_MESSAGE}${_prtReset}"
  )
endfunction()

function(fnPrintVariables)
  set(noValueArgs "WITH_CONTEXT")
  set(oneValueArgs "")
  set(multiValueArgs "")
  cmake_parse_arguments(
    PARSE_ARGV
    0
    "ARG"
    "${noValueArgs}"
    "${oneValueArgs}"
    "${multiValueArgs}"
  )
  # Defaults
  if(NOT ARG_WITH_CONTEXT)
    set(CMAKE_MESSAGE_CONTEXT "")
  endif()
  # Print
  foreach(variable IN LISTS ARG_UNPARSED_ARGUMENTS)
    message(NOTICE "${variable} = \"${${variable}}\"")
  endforeach()
endfunction()

# >----------< INITIALIZERS >--------------------------------------------------------------------< #

macro(_PRT_INIT_BASE)
  string(ASCII 27 _prtesc)
  string(CONCAT _prtBegin "${_prtesc}[")
  set(_prtEnd "m")
  set(_prtReset "${_prtBegin}0${_prtEnd}")
  set(_prtDelim ";")
endmacro()

macro(_PRT_INIT_DECORATIONS)
  set(_prtBold 1)
  set(_prtDim 2)
  set(_prtItalic 3)
  set(_prtUnderline 4)
  set(_prtBlink 5)
  set(_prtReverse 7)
  set(_prtHidden 8)
  set(_prtStrike 9)
endmacro()

macro(_PRT_INIT_COLORS)
  set(_prtFgBlack 30)
  set(_prtFgRed 31)
  set(_prtFgGreen 32)
  set(_prtFgYellow 33)
  set(_prtFgBlue 34)
  set(_prtFgMagenta 35)
  set(_prtFgCyan 36)
  set(_prtFgWhite 37)
  set(_prtFgDef 39)
  set(_prtFgBrBlack 90)
  set(_prtFgBrRed 91)
  set(_prtFgBrGreen 92)
  set(_prtFgBrYellow 93)
  set(_prtFgBrBlue 94)
  set(_prtFgBrMagenta 95)
  set(_prtFgBrCyan 96)
  set(_prtFgBrWhite 97)
  set(_prtBgBlack 40)
  set(_prtBgRed 41)
  set(_prtBgGreen 42)
  set(_prtBgYellow 43)
  set(_prtBgBlue 44)
  set(_prtBgMagenta 45)
  set(_prtBgCyan 46)
  set(_prtBgWhite 47)
  set(_prtBgDef 49)
  set(_prtBgBrBlack 100)
  set(_prtBgBrRed 101)
  set(_prtBgBrGreen 102)
  set(_prtBgBrYellow 103)
  set(_prtBgBrBlue 104)
  set(_prtBgBrMagenta 105)
  set(_prtBgBrCyan 106)
  set(_prtBgBrWhite 107)
endmacro()

macro(_PRT_INIT)
  _PRT_INIT_BASE()
  _PRT_INIT_DECORATIONS()
  _PRT_INIT_COLORS()
endmacro()

# >----------< INTERNAL >------------------------------------------------------------------------< #

if(CMAKE_HOST_WIN32)
  if(DEFINED ENV{WT_SESSION})
    _PRT_INIT()
  else()
    message(TRACE "Print module is only supported for Windows Terminal.")
  endif()
elseif(CMAKE_HOST_UNIX)
  _PRT_INIT()
else()
  message(TRACE "Print module is not supported on your platform.")
endif()
